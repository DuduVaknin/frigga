name: Release to PyPi and DockerHub

on:
  release:
    types: [published, edited]

env:
  APP_NAME: frigga

jobs:
  docker_build:
    runs-on: ubuntu-latest
    name: docker build
    steps:
      - uses: actions/checkout@v2
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@v3.x
      - name: Set env vars
        run: |
          export RELEASE_VERSION=${GITHUB_REF_SLUG}
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          export _DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${APP_NAME}:test-${RELEASE_VERSION//\//-}
          echo "DOCKER_TAG=${_DOCKER_TAG}" >> $GITHUB_ENV
      - name: docker login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
      - name: docker pull
        run: |
          docker pull "$DOCKER_TAG" || true
      - name: docker build
        run: docker build . -t cached --cache-from="$DOCKER_TAG"
      - name: docker tag
        run: docker tag cached "$DOCKER_TAG"
      - name: docker push
        run: docker push "$DOCKER_TAG" || true

  publish:
    needs: docker_build
    runs-on: ubuntu-latest
    env:
      RELEASE_REF: ${{ github.ref }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: "3.9"
      - name: Inject slug/short variables
        uses: rlespinasse/github-slug-action@3.0.0
      - name: Set Release Version
        run: |
          export RELEASE_VERSION=${GITHUB_REF_SLUG}
          echo -n $RELEASE_VERSION > ./version
          echo "RELEASE_VERSION=${RELEASE_VERSION}" >> $GITHUB_ENV
          export _DOCKER_TAG=docker.pkg.github.com/${GITHUB_REPOSITORY}/${APP_NAME}:test-${RELEASE_VERSION//\//-}
          echo "DOCKER_TAG=${_DOCKER_TAG}" >> $GITHUB_ENV
      - name: Validate Release Version
        run: |
          echo $GITHUB_ENV
          bash scripts/version_validation.sh
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
      - name: docker login
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login docker.pkg.github.com -u $GITHUB_ACTOR --password-stdin
      - name: docker pull
        run: |
          docker pull "$DOCKER_TAG"
      - name: Test - Deploy Stack
        env:
          FRIGGA_TESTING: true
        run: bash docker-compose/deploy_stack.sh
      - name: Test - Apply Changes
        run: bash docker-compose/apply_changes.sh
      - name: Build Package
        run: |
          pip install twine==3.1.1
          python setup.py sdist bdist_wheel
          twine check ./dist/*
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: ${{ secrets.PIP_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PIP_PASSWORD }}
          TWINE_NON_INTERACTIVE: true
        run: |
          twine upload ./dist/*
      - name: Set Env Vars For Docker
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          echo "DOCKERHUB_TAG=${DOCKER_USERNAME}/${APP_NAME}:${RELEASE_VERSION}" >> $GITHUB_ENV
      - name: Build Docker Image
        run: |
          docker build . --file Dockerfile --tag "${DOCKERHUB_TAG}" --build-arg GITHUB_SHA=$GITHUB_SHA
      - name: Push to DockerHub
        run: |
          echo '${{ secrets.DOCKER_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push "${DOCKERHUB_TAG}" && echo "Pushed $DOCKERHUB_TAG"
